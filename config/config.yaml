# config/config.yaml

# Choose the API provider: "google" or "openrouter"
api_provider: "openrouter" 

# --- Generic Settings ---
arc_data_dir: "data/arc/"
arc_outputs_dir: "data/outputs/"

training_challenges_file: "arc-agi_training_challenges.json"
training_solutions_file: "arc-agi_training_solutions.json"

evaluation_challenges_file: "arc-agi_evaluation_challenges.json"
evaluation_solutions_file: "arc-agi_evaluation_solutions.json"

raw_generations_output_file: "data/generated_sft/raw_generations.jsonl"

filtered_sft_output_file: "data/filtered_sft/arc_correct_cots.jsonl"
summarized_output_file: "data/filtered_sft/arc_correct_cots_summarized.jsonl"

max_tasks_to_process: 400 # Max tasks for either provider

# Base prompt template for the ARC task
BASE_PROMPT_TEMPLATE: |
  You are an expert in solving Abstraction and Reasoning Corpus (ARC) problems. Analyze the provided input/output examples and determine the transformation rule. Apply this rule to the final test input grid.

  **Task Description:**
  The user will provide several pairs of example input grids and their corresponding output grids. They represent a hidden transformation rule. Finally, a single test input grid is provided. Your goal is to deduce the rule from the examples and apply it to the test input grid to produce the correct test output grid.

  Output concise reasoning in `<thinking>` of 5 or less steps to arrive at the answer and output the final test grid (JSON list of lists, e.g., [[1,0]]) in `<answer>`. Verify consistency.

  {task_prompt_section}


REREAD_PROMPT_TEMPLATE: |
  You are an expert in solving Abstraction and Reasoning Corpus (ARC) problems. Analyze the provided input/output examples and determine the transformation rule. Apply this rule to the final test input grid.

  **Task Description:**
  The user will provide several pairs of example input grids and their corresponding output grids. They represent a hidden transformation rule. Finally, a single test input grid is provided. Your goal is to deduce the rule from the examples and apply it to the test input grid to produce the correct test output grid.

  Output concise reasoning in `<thinking>` of 5 or less steps to arrive at the answer and output the final test grid (JSON list of lists, e.g., [[1,0]]) in `<answer>`. Verify consistency.

  {task_prompt_section}

  Read the question again:

  {task_prompt_section} 

REFLECTION_PROMPT_TEMPLATE: |
  You are an expert in solving Abstraction and Reasoning Corpus (ARC) problems. Analyze the provided input/output examples and determine the transformation rule. Apply this rule to the final test input grid.

  **Task Description:**
  The user will provide several pairs of example input grids and their corresponding output grids. They represent a hidden transformation rule. Finally, a single test input grid is provided. Your goal is to deduce the rule from the examples and apply it to the test input grid to produce the correct test output grid.

  Output concise reasoning in `<thinking>` of 5 or less steps. Reflect on the `<thinking>` tokens in `<reflection>`. Then output the final test grid (JSON list of lists, e.g., [[1,0]]) in `<answer>`. Verify consistency.

  {task_prompt_section}






CONCISE_BASE_TEMPLATE: |
  Solve the ARC task based on the examples.
  Output concise reasoning in `<thinking>` of 5 or less steps to arrive at the answer and output the final test grid (JSON list of lists, e.g., [[1,0]]) in `<answer>`. Verify consistency.
  {task_prompt_section}


# --- OpenRouter Settings ---
openrouter_settings:
  api_key_env_var: "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"
  teacher_models:
    - "google/gemini-2.5-flash-preview:thinking"
  site_url: "http://localhost" # Or your actual site/app URL
  app_name: "arc-grpo-trainer" # Your project's name
  summarization_model: "openrouter/optimus-alpha"



generation_config:
    # CRITICAL: Increase max_tokens to allow for longer completions.
    # ARC reasoning can be verbose. Try 4096 or 8192.
    # Be mindful of the model's maximum context window (prompt + completion) and cost.
    max_tokens: 4096
    
openai_batch_settings:
  api_key_env_var: "OPENAI_API_KEY"
  batch_model_id: "o4-mini-2025-04-16" # The model to use for the batch
  batch_completion_window: "24h" # How long OpenAI has to complete the batch
  batch_input_file_prefix: "data/batches/input/batch_input" # Prefix for generated input files
  batch_output_dir: "data/batches/output/" # Directory to store downloaded batch results
  batch_status_poll_interval: 30 # Seconds to wait between polling batch status
